{"version":3,"sources":["../../src/lib/puppeteer-wrapper.js"],"names":["PuppeteerWrapper","constructor","logger","filePaths","options","_logger","_filePaths","_options","headless","chromePath","undefined","browser","db","JSONdb","setup","isChromePathSet","_setChromePath","args","width","push","height","logInfo","puppeteer","launch","executablePath","cleanup","close","newPage","page","_intercept","_client","send","on","target","client","createCDPSession","patterns","urlPattern","e","interceptionId","_getSavedPath","fs","existsSync","logError","defaultPath","_getDefaultOsPath","Array","isArray","i","length","console","log","set","get","process","platform"],"mappings":"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","file":"puppeteer-wrapper.js","sourcesContent":["import puppeteer from 'puppeteer-core';\n\nimport fs from 'fs';\nimport JSONdb from 'simple-json-db';\n\n/**\n * chromePath:  the path of the chrome executable in our pc\n * setup() :    initialize Puppeteer\n * cleanup():   clearnup Puppeteer\n * browser:     global Puppeteer browser instance\n * newPage():   get new page with default user agent and dimensions\n */\n\n /**\n  * options: {headless, width, height}\n  */\nexport class PuppeteerWrapper {\n    constructor(logger, filePaths, options) {\n        this._logger = logger;\n        this._filePaths = filePaths;\n        this._options = options || { headless: true };\n\n        // Public\n        this.chromePath = undefined;\n        this.browser = undefined;\n\n        this.db = new JSONdb('./settings.json');\n    }\n\n    //#region Public API setup - cleanup\n\n    async setup() {\n        const isChromePathSet = await this._setChromePath();\n        if (!isChromePathSet) {\n            return false;\n        }\n\n        const args = [];\n        if (this._options.width) {\n            args.push(`--window-size=${this._options.width},${this._options.height}`);\n        }\n\n        this._logger.logInfo(\"Setting up puppeteer...\");\n        this.browser = await puppeteer.launch({\n            headless: this._options.headless,\n            executablePath: this.chromePath,\n            args\n        });\n        // console.log(await this.browser.userAgent());\n        this._logger.logInfo(\"Puppeteer initialized\");\n        return true;\n    }\n\n    async cleanup() {\n        if (this.browser) await this.browser.close();\n    }\n\n    async newPage() {\n        await this.cleanup();\n        await this.setup();\n\n        const page = await this.browser.newPage();\n\n        // page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36');\n\n        await this._intercept(page);\n\n        if (this._options.width) {\n            await page._client.send('Emulation.clearDeviceMetricsOverride');\n        }\n\n        this.browser.on('targetcreated', async (target) => {\n            const page = await target.page();\n            this._intercept(page);\n        });\n\n        return page;\n    }\n\n    //#endregion\n\n    //#region Helpers\n    async _intercept(page) {\n        const client = await page.target().createCDPSession();\n\n        await client.send('Network.enable');\n\n        // added configuration\n        await client.send('Network.setRequestInterception', {\n            patterns: [{ urlPattern: '*' }],\n        });\n\n        await client.on('Network.requestIntercepted', async e => {\n            // console.log('EVENT INFO: ');\n            // console.log(e.interceptionId);\n            // console.log(e.resourceType);\n            // console.log(e.isNavigationRequest);\n\n            await client.send('Network.continueInterceptedRequest', {\n                interceptionId: e.interceptionId,\n            });\n        });\n    }\n\n    async _setChromePath() {\n        this.chromePath = await this._getSavedPath();\n\n        if (this.chromePath) {\n            if (fs.existsSync(this.chromePath)) return true;\n\n            // The saved path does not exists\n            this._logger.logError(`Saved Chrome path does not exists: ${this.chromePath}`);\n        }\n\n        // Try the default path\n        const defaultPath = this._getDefaultOsPath();\n\n        if (Array.isArray(defaultPath)) {\n            for (let i = 0; i < defaultPath.length; i++) {\n                this.chromePath = defaultPath[i];\n                if (fs.existsSync(this.chromePath)) {\n                    console.log(this.chromePath);\n                    this.db.set('chrome_path', this.chromePath);\n                    break;\n                }\n            }\n\n            return true;\n        } else {\n            this.chromePath = defaultPath;\n\n            if (fs.existsSync(this.chromePath)) {\n                this.db.set('chrome_path', this.chromePath);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _getSavedPath() {\n        return this.db.get('chrome_path');\n    }\n\n    _getDefaultOsPath() {\n        if (process.platform === \"win32\") {\n            return [\n                'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n                'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n                'C:\\\\Users\\\\Hendro\\\\AppData\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n            ];\n        } else {\n            return '/usr/bin/google-chrome';\n        }\n    }\n\n    //#endregion\n}\n"]}